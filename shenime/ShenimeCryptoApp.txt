!!!!!!!!!!!
 ZVOGELO MADHESIN E SHKRIMIT RREGULLO ROUTES NE APP.JS DHE BACKEND FILLO DETAILS KUR KLIKON CRYPTO DALIN DETAILS,
!!!!!!!!!!!

isLoaded USESTATE USEEFFECT

LogIn/Register.jsx
Form with picture not required + Validations + buttons
+/db
welcome user / login detected

*CryptoList.jsx 
Star button crypto Add to Favourites.jsx
Buy or Transfer Buttons in map --->>> 1/2 DONE
VENDOS GIF ANIMATED LOGO

*Details.jsx 
Graph
Details
History

*Portfolio.jsx
showing my balance and options -> Transfer, Buy

*Buy.jsx
Form of converting + buttons

*Transfer.jsx
Available and Wallet ID + buttons

*Edit Profile.jsx
Form with picture + Validations + buttons

*Footer.jsx
Social Media Icons

*ERROR 404








CRYPTOLIST ME 2 TABELA 
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { styled } from '@mui/system';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Paper from '@mui/material/Paper';
import ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';
import ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';
import Typography from '@mui/material/Typography';
import Style from '../CryptoList/CryptoList.css';

const TransparentTable = styled(Table)({
  backgroundColor: 'transparent',
});

const IndexCell = styled(TableCell)(({ theme }) => ({
  width: '50px',
  paddingRight: '0px',
}));

const LogoImage = styled('img')({
  marginRight: '10px',
  width: '25px',
  height: '25px',
});

const CenteredHeading = styled('h2')({
  textAlign: 'center',
});

const BoldText = styled('span')({
  fontWeight: 'bold',
});

const CenteredTableContainer = styled(TableContainer)(({ theme }) => ({
  display: 'flex',
  justifyContent: 'center',
  [theme.breakpoints.down('sm')]: {
    display: 'block',
  },
}));

const CoinName = styled('span')({
  display: 'flex',
  alignItems: 'center',
  gap: '8px',
});

const GreySymbol = styled('span')({
  color: '#808a9d',
  fontSize: '12px',
});

const ChangePercentCell = styled(TableCell)(({ theme, isPositive }) => ({
  color: isPositive ? '#16c784' : '#ea3943',
}));

const ArrowIcon = styled('span')(({ theme, isPositive }) => ({
  marginLeft: '4px',
  display: 'inline-flex',
  alignItems: 'center',
  color: isPositive ? '#16c784' : '#ea3943',
}));

const formatPrice = (price) => {
  return parseFloat(price).toLocaleString(undefined, {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  });
};

const CryptoList = () => {
  const [cryptoList, setCryptoList] = useState([]);
  const [logoList, setLogoList] = useState({});
  const [sortField, setSortField] = useState('');
  const [sortOrder, setSortOrder] = useState('asc');

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get('https://api.coincap.io/v2/assets');
        setCryptoList(response.data.data);
      } catch (error) {
        console.log(error);
      }
    };

    fetchData();
  }, []);

    const fetchLogos = async () => {
      try {
        const symbols = cryptoList.map((crypto) => crypto.symbol);
        const response = await axios.get('https://min-api.cryptocompare.com/data/all/coinlist');
        const coinList = response.data.Data;

        const logos = symbols.reduce((acc, symbol) => {
          if (coinList[symbol] && coinList[symbol].ImageUrl) {
            acc[symbol] = `https://www.cryptocompare.com${coinList[symbol].ImageUrl}`;
          }
          return acc;
        }, {});

        setLogoList(logos);
      } catch (error) {
        console.log(error);
      }
    };

    if (cryptoList.length > 0) {
      fetchLogos();
    }
  
  const handleSort = (field) => {
    if (sortField === field) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortOrder('asc');
    }
  };

  const sortedCryptoList = [...cryptoList].sort((a, b) => {
    if (sortField === 'name') {
      const aValue = a[sortField].toLowerCase();
      const bValue = b[sortField].toLowerCase();

      if (sortOrder === 'asc') {
        if (aValue < bValue) return -1;
        if (aValue > bValue) return 1;
        return 0;
      } else {
        if (aValue > bValue) return -1;
        if (aValue < bValue) return 1;
        return 0;
      }
    } else {
      const aValue = sortField ? parseFloat(a[sortField]) : null;
      const bValue = sortField ? parseFloat(b[sortField]) : null;

      if (sortOrder === 'asc') {
        return aValue - bValue;
      } else {
        return bValue - aValue;
      }
    }
  });

  return (
    <div>
      <CenteredHeading>Today's Cryptocurrency Prices by Market Cap</CenteredHeading>
      <CenteredTableContainer component={Paper}>
        <TransparentTable sx={{ minWidth: 650 }} aria-label="simple table">
          <TableHead>
            <TableRow>
              <IndexCell>
                <BoldText>#</BoldText>
              </IndexCell>
              <TableCell onClick={() => handleSort('name')}>
                <BoldText>Coin</BoldText>
                {sortField === 'name' && (sortOrder === 'asc' ? ' ▲' : ' ▼')}
              </TableCell>
              <TableCell align="left" onClick={() => handleSort('changePercent24Hr')}>
                <BoldText>24h Change</BoldText>
                {sortField === 'changePercent24Hr' && (sortOrder === 'asc' ? ' ▲' : ' ▼')}
              </TableCell>
              <TableCell align="left" onClick={() => handleSort('priceUsd')}>
                <BoldText>Price</BoldText>
                {sortField === 'priceUsd' && (sortOrder === 'asc' ? ' ▲' : ' ▼')}
              </TableCell>
              <TableCell align="left" onClick={() => handleSort('volumeUsd24Hr')}>
                <BoldText>24h Volume</BoldText>
                {sortField === 'volumeUsd24Hr' && (sortOrder === 'asc' ? ' ▲' : ' ▼')}
              </TableCell>
              <TableCell align="left" onClick={() => handleSort('marketCapUsd')}>
                <BoldText>Market Cap</BoldText>
                {sortField === 'marketCapUsd' && (sortOrder === 'asc' ? ' ▲' : ' ▼')}
              </TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {sortedCryptoList.map((crypto, index) => {
              const isPositiveChange = parseFloat(crypto.changePercent24Hr) >= 0;

              return (
                <TableRow key={crypto.name} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>
                  <IndexCell>
                    <BoldText>{index + 1}</BoldText>
                  </IndexCell>
                  <TableCell>
                    <CoinName>
                      {logoList[crypto.symbol] && <LogoImage src={logoList[crypto.symbol]} alt={crypto.name} />}
                      <Typography>{crypto.name}</Typography> {/* Update Text to Typography */}
                      <GreySymbol>({crypto.symbol})</GreySymbol>
                    </CoinName>
                    </TableCell>
                  <ChangePercentCell
                    align="left"
                    isPositive={isPositiveChange}
                  >
                    {isPositiveChange ? (
                      <ArrowUpwardIcon fontSize="small" />
                    ) : (
                      <ArrowDownwardIcon fontSize="small" />
                    )}
                    <span>{parseFloat(crypto.changePercent24Hr).toFixed(2)}%</span>
                  </ChangePercentCell>
                  <TableCell align="left">$ {formatPrice(crypto.priceUsd)}</TableCell>
                  <TableCell align="left">$ {formatPrice(crypto.volumeUsd24Hr)}</TableCell>
                  <TableCell align="left">$ {formatPrice(crypto.marketCapUsd)}</TableCell>
                  <button className='buy'>Buy</button>
                </TableRow>
              );
            })}
          </TableBody>
        </TransparentTable>
      </CenteredTableContainer>
    </div>
  );
};

export default CryptoList;